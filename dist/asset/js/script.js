// Generated by CoffeeScript 2.7.0
(function() {
  var anchorLink, breakpoint, initNum, isSp, position, scrollFunction, timer;

  breakpoint = 980;

  isSp = false;

  timer = null;

  initNum = 0;

  position = 0;

  if (window.innerWidth < breakpoint) {
    isSp = true;
  }

  window.addEventListener("load", () => {
    var current_btm, current_pos, winH, winW;
    console.log('load');
    winH = window.innerHeight;
    winW = window.innerWidth;
    current_pos = window.scrollY;
    current_btm = current_pos + winH;
    return checkOrientation();
  });

  document.addEventListener('DOMContentLoaded', () => {
    var current_btm, current_pos, winH, winW;
    winH = window.innerHeight;
    winW = window.innerWidth;
    current_pos = window.scrollY;
    return current_btm = current_pos + winH;
  });

  window.addEventListener("resize", (event) => {
    if (window.innerWidth < breakpoint) {
      isSp = true;
    } else {
      isSp = false;
    }
    return checkOrientation();
  });

  window.addEventListener("orientationchange", (event) => {
    if (window.innerWidth < breakpoint) {
      isSp = true;
    } else {
      isSp = false;
    }
    return checkOrientation();
  });

  window.addEventListener("scroll", (event) => {
    return scrollFunction();
  });

  // スクロール時の処理
  scrollFunction = function() {
    var current_btm, current_pos, scrollObjects, toggleObjects, winH, winW;
    winH = window.innerHeight;
    winW = window.innerWidth;
    current_pos = window.scrollY;
    current_btm = current_pos + winH;
    scrollObjects = document.querySelectorAll('.scroll-in');
    scrollObjects.forEach((scrollObject) => {
      if (scrollObject.getBoundingClientRect().top < 5 * (winH / 6)) {
        return scrollObject.classList.add('show');
      }
    });
    toggleObjects = document.querySelectorAll('.scroll-toggle');
    toggleObjects.forEach((toggleObject) => {
      if (toggleObject.getBoundingClientRect().top < 3 * (winH / 6)) {
        return toggleObject.classList.add('on');
      } else {
        return toggleObject.classList.remove('on');
      }
    });
    toggleObjects = document.querySelectorAll('.scroll-toggle-bottom');
    return toggleObjects.forEach((toggleObject) => {
      if (toggleObject.getBoundingClientRect().top < 6 * (winH / 6)) {
        return toggleObject.classList.add('bottom');
      } else {
        return toggleObject.classList.remove('bottom');
      }
    });
  };

  // アンカーリンク登録
  anchorLink = function() {
    var anchorLinks, anchorLinksArr;
    anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinksArr = Array.prototype.slice.call(anchorLinks);
    return anchorLinksArr.forEach((link) => {
      return link.addEventListener('click', (e) => {
        var gap, targetElement, targetId, targetOffsetTop;
        e.preventDefault();
        targetId = link.hash;
        targetElement = document.querySelector(targetId);
        gap = 0;
        if (!isSp) {
          gap = 56;
        }
        targetOffsetTop = window.pageYOffset + targetElement.getBoundingClientRect().top - gap;
        return window.scrollTo({
          top: targetOffsetTop,
          behavior: "smooth"
        });
      });
    });
  };

}).call(this);
